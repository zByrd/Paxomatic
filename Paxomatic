#paxalertzbyrd@gmail.com colt.legit@gmail.com repathon@gmail.com Austin.LaLonde@gmail.com greg.keithpowers@gmail.com acpongratz@gmail.com claytonsorden@gmail.com 3606240861@vzwpix.com the_sam13@hotmail.com camdonk@gmail.com alecw155@gmail.com harbar10@gmail.com jackhrobertson@gmail.com

 
#Realtalk though, I didn't think I'd be sharing this code so I didn't bother with any of that or using naming conventions.
from twill.commands import *
import re
import webbrowser
import smtplib
import sys
from time import sleep

print " ____   _   __  _____  __  __    _  _____ ___ ____ "
print "|  _ \ / \  \ \/ / _ \|  \/  |  / \|_   _|_ _/ ___|"
print "| |_) / _ \  \  | | | | |\/| | / _ \ | |  | | |    "
print "|  __/ ___ \ /  | |_| | |  | |/ ___ \| |  | | |___"
print "|_| /_/   \_/_/\_\___/|_|  |_/_/   \_|_| |___\____|"
print " "
print " "
print "Welcome to the Paxomatic, your best bet for getting those badges!"
print " "
print "Please enter the full URL (including http://) of the webpage you want to monitor."
print " "
webpage = raw_input ("URL:")
print " "
print "Please enter all email addresses you would like to receive alerts, separated by spaces."
print " "
recipients = raw_input ("Emails:")
mailinglist = recipients.split(' ')




print "Navigating to page..."
sleep(2)

def error_free_go(URL):
    while True:
        try:
            go(URL)
            sleep(1)
            return URL
        except BaseException:
              print('The site you are monitoring seems to be down. Would you like to reinput the url? If so, press Control + C.')
              print('Otherwise, Paxomatic will continue to refresh the page as normal after 20 seconds.')
              try:
                for i in range(0,20):
                    sleep(1) # could use a backward counter to be preeety :)
                print('No input given. Resuming program...')
                print(' ')
              except KeyboardInterrupt:
                  URL = raw_input("New URL:")
                  go(URL)
                  sleep(1)
                  return URL


webpage = error_free_go(webpage)
print webpage
                   
print "Connection successful!"
sleep(2)


#counts how many times the page has been refreshed
count = 0
 
#If the testlist = [1,2,3,4,5] then the program knows this is the first time it's loaded the page.
#I tried a few less retarded ways to do it but none of them wanted to cooperate. 
testlist = [1,2,3,4,5]

while True:
    #generates a list of all the linked URLS, then generates a new list from that one that doesn't include all the links' metadata. 
    linkhack = list(showlinks())
    linkcount = len(linkhack)
    linklist = list()
    for x in range(0, linkcount):         
        linklist.append(linkhack[x].url)
       
    #prints the number of links, then sees if the link list differs from last pageload's list.
    print "%d links total." % linkcount
    print "Scanning for changes in page links..."
    print " "
    if testlist == [1,2,3,4,5]:
        testlist = linklist
        
    elif testlist == linklist:
        count += 1
        print "All URLS the same. Refreshing in 10 seconds. This was pageload number %d" % count
        sleep(10)
        error_free_go("http://www.google.com") #twill's "reload" command wasn't working for some reason, so I made this workaround.
        error_free_go(webpage)
       
      
    else:
        print "Difference detected!"
        print "Links that have disappeared:"
        gonelinks = [x for x in testlist if x not in linklist]
        print gonelinks
        print " "
        print "New Links:"
        newlinks = [x for x in linklist if x not in testlist]
        print newlinks
        print " "
        
        #connects to gmail and sends email alert. 
        print "Sending alerts to the mailing list from my PAXAlert account..."
        sleep(2)

        for m in range(0, len(mailinglist)):
            GMAIL_USERNAME = "paxomatic69"
            GMAIL_PASSWORD = "paxpaxpax"
            email_subject = "%s PAGE UPDATE" % webpage
            linkstring = ' '.join(newlinks)
            body_of_email = "Paxomatic here! %s has updated! Here are any new links added to the page, one of which is probably the badge registration page: %s" % (webpage, linkstring)

            session = smtplib.SMTP('smtp.gmail.com', 587)
            session.ehlo()
            session.starttls()
            session.login(GMAIL_USERNAME, GMAIL_PASSWORD)
            
            headers = "\r\n".join(["from: " + GMAIL_USERNAME,
                                   "subject: " + email_subject,
                                   "to: " + mailinglist[m],
                                   "mime-version: 1.0",
                                   "content-type: text/html"])

            # body_of_email can be plaintext or html! That's pretty neat!                   
            content = headers + "\r\n\r\n" + body_of_email
            session.sendmail(GMAIL_USERNAME, mailinglist[m], content)
            print "Sending email to \"%s\"" % mailinglist[m]
            sleep(1)
        
        #Asks the user if they want to open the new links which appeared on the page. 


        print "Would you like to open any new links in your default browser?"
        print "If so, please press control+C. Otherwise, Paxomatic will continue as normal in 30 seconds."
        try:
            for i in range(0,30):
                sleep(1)
            print "Links not opened."
        except KeyboardInterrupt:
            listnewlinks = list(newlinks)
            for p in range(0, len(listnewlinks)):
                webbrowser.open_new(listnewlinks[p], 2, autoraise=True)
            print "Links opened."

        print "Resuming Program"
        testlist = linklist



        
     

        
        
        
        
        





    




    

    


        
        
        
        
        





    




    

    

        
        
        





    




    

    
